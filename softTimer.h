/**
 *******************************************************************************
 * @file           : softTimer.h
 * @author         : Keyhan Salehi
 * @brief          : Lightweight software timer library for STM32
 *******************************************************************************
 * @attention
 *
 * This library provides simple non-blocking software timers using HAL_GetTick()
 * or a user-defined tick source. Supports millisecond-based timeouts.
 *
 *******************************************************************************
 */

#ifndef INC_SOFTTIMER_H_
#define INC_SOFTTIMER_H_

/* Includes ------------------------------------------------------------------*/
#include <stdint.h>
#include <stdbool.h>
#include "main.h"   /* this file generated by cubeMx */

/* Defines & Macros ----------------------------------------------------------*/

/**
 * @brief Tick source macro
 * @note  By default, uses HAL_GetTick() which returns ms since startup.
 *        Can be overridden for testing or alternative tick sources.
 */
#ifndef SOFTTIMER_TICK
#define SOFTTIMER_TICK()   HAL_GetTick()
#endif

/**
 * @brief Time Conversion Macros
 */
#define SEC_TO_MS(sec)   ((uint32_t)((sec) * 1000U))          /*!< Seconds to ms */
#define MIN_TO_MS(min)   ((uint32_t)((min) * 60U * 1000U))    /*!< Minutes to ms */
#define MS_TO_US(ms)     ((uint32_t)((ms) * 1000U))           /*!< Milliseconds to us */
#define SEC_TO_US(sec)   ((uint32_t)((sec) * 1000000U))       /*!< Seconds to us */

/* Typedefs ------------------------------------------------------------------*/

/**
 * @brief Software timer type
 * @note  Just a uint32_t variable holding the last reset tick
 */
typedef uint32_t softTimer_t;

/* Exported Functions (Inline) -----------------------------------------------*/

/**
 * @fn    static inline void softTimer_reset(softTimer_t*)
 * @brief Reset timer start tick to current tick
 * @param timer Pointer to timer variable
 */
static inline void softTimer_reset(softTimer_t *timer)
{
    *timer = SOFTTIMER_TICK();
}

/**
 * @fn    static inline bool softTimer_isElapsed(softTimer_t*, uint32_t)
 * @brief Check if timer has elapsed
 * @param timer   Pointer to timer variable
 * @param timeout Timeout in milliseconds
 * @return true if timeout elapsed, false otherwise
 */
static inline bool softTimer_isElapsed(softTimer_t *timer, uint32_t timeout)
{
    return ((uint32_t)(SOFTTIMER_TICK() - *timer) >= timeout);
}

#endif /* INC_SOFTTIMER_H_ */

/************************ (C) COPYRIGHT KeyhanSalehi *****END OF FILE****/
